:parenttoc: True

.. include:: includes/big_toc_css.rst

.. _filtering:

==================
Drift Removing
==================

.. currentmodule:: spkit.core.processing


IIR Filters of Order 1
======================

Filter out DC component - Remving drift using Recursive (IIR type) filter
    
          .. math::
             y[n] = ((alpha-1)/alpha) * ( x[n] - x[n-1] -y[n-1])

          where :math:`y[-1] = x[0]`, :math:`x[-1] = x[0]`
          resulting :math:`y[0] = 0`

    Implemenatation works for single (1d array) or multi-channel (2d array)



::

  import numpy as np
  import matplotlib.pyplot as plt

  import spkit as sp

  xf = sp.filterDC(x,alpha=256,return_background=False)



Spectral filter - IIR Filters
=============================

A common approach to remove drift is also to use spectral filtering such as buttorworth filter to filter-out 0 frequency component.


::

  import spkit as sp
  x,fs = sp.load_data.eeg_sample_1ch()
  t = np.arange(len(x))/fs
  xf = sp.filter_X(x.copy(),fs=128.0, band=[0.5], btype='highpass',ftype='SOS')

Savitzky-Golay filter
=====================


Filter out DC component using Savitzky-Golay filter

    **Filter out DC component - Removing drift using Savitzky-Golay filter**
    

    Savitzky-Golay filter for multi-channels signal: From Scipy library

::

  import numpy as np
  import matplotlib.pyplot as plt
  import spkit as sp

  x = sp.create_signal_1d(n=1000, sg_polyorder=1, sg_winlen=1, seed=1)
  y = sp.filterDC_sGolay(x.copy(),window_length=127, polyorder=1)
  xf = sp.filterDC_sGolay(x,window_length=127, polyorder=3)




:parenttoc: True

.. include:: includes/big_toc_css.rst

.. _filtering_smoothing:

==================
Smoothing
==================


Spectral Filters
================


Savitzky-Golay filter
=====================

Smoothing filter using Savitzky-Golay filter
    

::

    import numpy as np
    import matplotlib.pyplot as plt
    import spkit as sp
    x,fs = sp.data.ppg_sample(sample=1)
    x = x[:int(fs*5)]
    x = x - x.mean()
    t = np.arange(len(x))/fs
    xf1 = sp.filter_smooth_sGolay(x.copy(),window_length=31, polyorder=2)
    xf2 = sp.filter_smooth_sGolay(x.copy(),window_length=31, polyorder=5)
    xf3 = sp.filter_smooth_sGolay(x.copy(),window_length=51, polyorder=3)




Gaussian Filter
================

Smoothing filter using Gaussian Kernel and 1d-ConvFB
    
    **Smoothing filter using Gaussian Kernel and 1d-ConvFB**
    
    sigma : sigma for gaussian kernel, if None, sigma=window_length/6


::

    import numpy as np
    import matplotlib.pyplot as plt
    import spkit as sp
    x,fs = sp.data.ppg_sample(sample=1)
    x = x[:int(fs*5)]
    x = x - x.mean()
    t = np.arange(len(x))/fs
    xf1 = sp.filter_smooth_gauss(x.copy(),window_length=31, sigma_scale=2.7)
    xf2 = sp.filter_smooth_gauss(x.copy(),window_length=31, sigma_scale=5.4)
    xf3 = sp.filter_smooth_gauss(x.copy(),window_length=51, sigma_scale=2.7)



Mollifier
================

Smoothing filter using Mollifier kernel and 1d-ConvFB

    **Smoothing filter using Mollifier kernel and 1d-ConvFB**
    
    **Mollifier: Kurt Otto Friedrichs**

    Generalized function

    .. math:: f(x) =  exp(-s/(1-|x|**p))    for |x|<1,   x \in [-r, r]

    Convolving with a mollifier, signals's sharp features are smoothed, while still remaining close
    to the original nonsmooth (generalized) signals.

    Intuitively, given a function which is rather irregular, by convolving it with a mollifier the function gets "mollified".

    This function is infinitely differentiable, non analytic with vanishing derivative for |x| = 1,
    can be therefore used as mollifier as described in [1]. This is a positive and symmetric mollifier.[2]





Wavelet Filtering
=================


:parenttoc: True

.. include:: includes/big_toc_css.rst

==================
Spectral Filters
==================


Custom filtering
=================

::

  import numpy as np
  import matplotlib.pyplot as plt

  import spkit as sp

  #highpass
  Xf = sp.filter_X(X,band =[0.5],btype='highpass',order=5,fs=128.0,ftype='filtfilt')

  #bandpass
  Xf = sp.filter_X(X,band =[1, 4],btype='bandpass',order=5,fs=128.0,ftype='filtfilt')

  #lowpass
  Xf = sp.filter_X(X,band =[40],btype='lowpass',order=5,fs=128.0,ftype='filtfilt')



:parenttoc: True

.. include:: includes/big_toc_css.rst


==================
Kernel Filtering
==================

Kernel Filtering
=================



==================
Filtering Pipeline
==================

:parenttoc: True

.. include:: includes/big_toc_css.rst


Powerline Interference removal
==============================


:parenttoc: True

.. include:: includes/big_toc_css.rst


=======================
Spatial Filtering (3D)
=======================


Using Adjacency matrix 
=======================


Using Proximity (distance)
==========================


Using Nearest Neighbours
========================

:parenttoc: True

.. include:: includes/big_toc_css.rst


=======================
Graph Filtering 
=======================


Using Adjacency matrix 
=======================


Using Proximity (distance)
==========================


Using Nearest Neighbours
========================



.. topic:: References

  * [1] https://en.wikipedia.org/wiki/Mollifier
  * [2] https://en.wikipedia.org/wiki/Kurt_Otto_Friedrichs