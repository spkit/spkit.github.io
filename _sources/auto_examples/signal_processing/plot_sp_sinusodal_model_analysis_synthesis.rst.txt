
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/signal_processing/plot_sp_sinusodal_model_analysis_synthesis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_signal_processing_plot_sp_sinusodal_model_analysis_synthesis.py>`
        to download the full example code or to run this example in your browser via JupyterLite or Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_signal_processing_plot_sp_sinusodal_model_analysis_synthesis.py:


=========================================
Sinusoidal Model:  Analysis and Synthesis
=========================================

# Sinusoidal Model:  Analysis and Synthesis

In this example, first we decompose an audio file into ONLY 20 sinusoidal tracks and then
reconstruct an audio from it. We will  also examin the residual.

Before starting, listen following three audio files, that are the same as generated from
this example.

**Resulting Sinusoidal Model**


* `Original Audio <https://github.com/spkit/data_samples/raw/main/files/singing-female.wav>`_
* `Reconstructed Audio <https://github.com/spkit/data_samples/raw/main/files/sinmodel_recons_singing-female.wav>`_
* `Residual Audio <https://github.com/spkit/data_samples/raw/main/files/sinmodel_residual_singing-female.wav>`_


.. raw:: html
   
   <div class="column-box">
   <p style="text-align:center;">Original Audio</p>
   <audio controls=""><source src="https://github.com/spkit/data_samples/raw/main/files/singing-female.wav?raw=true" type="audio/wav" /></audio>
   </div>

   <div class="column-box">
   <p style="text-align:center;">Reconstructed Audio</p>
   <audio controls=""><source src="https://github.com/spkit/data_samples/raw/main/files/sinmodel_recons_singing-female.wav?raw=true" type="audio/wav" /></audio>
   </div>

   <div class="column-box">
   <p style="text-align:center;">Residual Audio</p>
   <audio controls=""><source src="https://github.com/spkit/data_samples/raw/main/files/sinmodel_residual_singing-female.wav?raw=true" type="audio/wav" /></audio>
   </div>

.. GENERATED FROM PYTHON SOURCE LINES 42-44

Example
--------

.. GENERATED FROM PYTHON SOURCE LINES 44-54

.. code-block:: Python



    import numpy as np
    import matplotlib.pyplot as plt
    import requests, logging, os
    from scipy.io import wavfile
    import spkit as sp
    print('spkit-version :',sp.__version__)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    spkit-version : 0.0.9.7




.. GENERATED FROM PYTHON SOURCE LINES 55-57

Download audio file
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 57-70

.. code-block:: Python


    path  = 'https://github.com/spkit/data_samples/raw/main/files/singing-female.wav?raw=true'

    file_name = 'singing-female.wav'

    if not(os.path.exists(file_name)):
        req = requests.get(path)
        with open(file_name, 'wb') as f:
                f.write(req.content)

    fs, x = wavfile.read(file_name)
    t = np.arange(len(x))/fs








.. GENERATED FROM PYTHON SOURCE LINES 71-73

STFT of Audio
--------------

.. GENERATED FROM PYTHON SOURCE LINES 73-92

.. code-block:: Python


    mXt,pXt = sp.stft_analysis(x, winlen=441, overlap=220,window='blackmanharris',nfft=None)

    plt.figure(figsize=(13,6))
    plt.subplot(211)
    plt.plot(t,x)
    plt.xlim([t[0],t[-1]])
    plt.grid()
    plt.title('Original audio')
    plt.ylabel('amplitude (μV)')
    plt.subplot(212)
    plt.imshow(mXt.T,aspect='auto',origin='lower',cmap='jet',extent=[t[0],t[-1],0,fs/2])
    plt.title('Spectrogram')
    plt.ylabel('frequency (Hz)')
    plt.xlabel('time (s)')
    plt.tight_layout()
    plt.show()





.. image-sg:: /auto_examples/signal_processing/images/sphx_glr_plot_sp_sinusodal_model_analysis_synthesis_001.png
   :alt: Original audio, Spectrogram
   :srcset: /auto_examples/signal_processing/images/sphx_glr_plot_sp_sinusodal_model_analysis_synthesis_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-95

Analysis of Audio with only 20 sinusodal tracks
------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 95-131

.. code-block:: Python


    N = 20

    fXst, mXst, pXst = sp.sineModel_analysis(x,fs,winlen=3001,overlap=750,
                                window='blackmanharris', nfft=None, thr=-10, 
                                maxn_sines=N,minDur=0.01, freq_devOffset=10,freq_devSlope=0.1)

    print(fXst.shape, mXst.shape, pXst.shape)


    # plotting only frequency which have magnitude > 0dB

    fXt1 = (fXst.copy())*(mXst>0)
    fXt1[fXt1==0]=np.nan

    plt.figure(figsize=(13,7))
    plt.subplot(211)
    plt.plot(t,x)
    plt.xlim([t[0],t[-1]])
    plt.grid()
    plt.title('Original Audio')
    plt.ylabel('amplitude (μV)')
    plt.subplot(212)
    plt.imshow(mXt.T,aspect='auto',origin='lower',cmap='jet',extent=[t[0],t[-1],0,fs/2])
    plt.title('Spectrogram')
    tx = t[-1]*np.arange(fXt1.shape[0])/fXt1.shape[0]
    plt.plot(tx,fXt1,'-k',alpha=0.5)
    plt.xlim([0,tx[-1]])
    plt.title(f'Sinusoidal tracks: n={N}')
    plt.xlabel('time (s)')
    plt.ylabel('frequency (Hz)')
    plt.grid(alpha=0.3)
    plt.tight_layout()
    plt.show()





.. image-sg:: /auto_examples/signal_processing/images/sphx_glr_plot_sp_sinusodal_model_analysis_synthesis_002.png
   :alt: Original Audio, Sinusoidal tracks: n=20
   :srcset: /auto_examples/signal_processing/images/sphx_glr_plot_sp_sinusodal_model_analysis_synthesis_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (363, 20) (363, 20) (363, 20)




.. GENERATED FROM PYTHON SOURCE LINES 132-134

Synthesis of Audio from 20 sinusodal tracks
--------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 134-155

.. code-block:: Python


    Xr = sp.sineModel_synthesis(fXst, mXst, pXst,fs,overlap=750)
    print(Xr.shape)

    mXrt,pXrt = sp.stft_analysis(Xr, winlen=441, overlap=220,window='blackmanharris',nfft=None)

    plt.figure(figsize=(13,6))
    plt.subplot(211)
    plt.plot(t,Xr[:len(x)])
    plt.xlim([t[0],t[-1]])
    plt.grid()
    plt.title(f'Reconstructed Audio from {N} Sinusoidal: $x_r(t)$')
    plt.ylabel('amplitude (μV)')
    plt.subplot(212)
    plt.imshow(mXrt.T,aspect='auto',origin='lower',cmap='jet',extent=[t[0],t[-1],0,fs/2])
    plt.title(r'Spectrogram of $x_r(t)$')
    plt.xlabel('time (s)')
    plt.ylabel('frequency (Hz)')
    plt.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/signal_processing/images/sphx_glr_plot_sp_sinusodal_model_analysis_synthesis_003.png
   :alt: Reconstructed Audio from 20 Sinusoidal: $x_r(t)$, Spectrogram of $x_r(t)$
   :srcset: /auto_examples/signal_processing/images/sphx_glr_plot_sp_sinusodal_model_analysis_synthesis_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (273000,)




.. GENERATED FROM PYTHON SOURCE LINES 156-158

Residual: Discarded part of Audio - mostly hissing sound
---------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 158-177

.. code-block:: Python


    Xd = x - Xr[:len(x)]

    mXdt,pXdt = sp.stft_analysis(Xd, winlen=441, overlap=220,window='blackmanharris',nfft=None)

    plt.figure(figsize=(13,6))
    plt.subplot(211)
    plt.plot(t,Xd)
    plt.xlim([t[0],t[-1]])
    plt.grid()
    plt.title(r'Residual: Discarded part of Audio: $x_d(t) = x(t)-x_r(t)$')
    plt.ylabel('amplitude (μV)')
    plt.subplot(212)
    plt.imshow(mXdt.T,aspect='auto',origin='lower',cmap='jet',extent=[t[0],t[-1],0,fs/2])
    plt.title(r'Spectrogram of $x_d(t)$')
    plt.ylabel('frequency (Hz)')
    plt.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/signal_processing/images/sphx_glr_plot_sp_sinusodal_model_analysis_synthesis_004.png
   :alt: Residual: Discarded part of Audio: $x_d(t) = x(t)-x_r(t)$, Spectrogram of $x_d(t)$
   :srcset: /auto_examples/signal_processing/images/sphx_glr_plot_sp_sinusodal_model_analysis_synthesis_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 178-206

Save files and Play with Jupyter
---------------------------------

 .. code-block:: python

    import IPython
    wavfile.write(f"sinmodel_recons_"+file_name, rate=fs, data=Xr[:len(x)].astype(np.int16))
    wavfile.write(f"sinmodel_residual_"+file_name, rate=fs, data=Xd.astype(np.int16))
    display(IPython.display.Audio(data=x,rate=fs))
    display(IPython.display.Audio(data=Xr[:len(x)],rate=fs))
    display(IPython.display.Audio(data=Xd,rate=fs))

 .. raw:: html

    <div class="column-box">
    <p style="text-align:center;">Original Audio</p>
    <audio controls=""><source src="https://github.com/spkit/data_samples/raw/main/files/singing-female.wav?raw=true" type="audio/wav" /></audio>
    </div>

    <div class="column-box">
    <p style="text-align:center;">Reconstructed Audio</p>
    <audio controls=""><source src="https://github.com/spkit/data_samples/raw/main/files/sinmodel_recons_singing-female.wav?raw=true" type="audio/wav" /></audio>
    </div>

    <div class="column-box">
    <p style="text-align:center;">Residual Audio</p>
    <audio controls=""><source src="https://github.com/spkit/data_samples/raw/main/files/sinmodel_residual_singing-female.wav?raw=true" type="audio/wav" /></audio>
    </div>


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.369 seconds)


.. _sphx_glr_download_auto_examples_signal_processing_plot_sp_sinusodal_model_analysis_synthesis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/spkit/spkit/0.9.X?urlpath=lab/tree/notebooks/auto_examples/signal_processing/plot_sp_sinusodal_model_analysis_synthesis.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: lite-badge

      .. image:: images/jupyterlite_badge_logo.svg
        :target: ../../lite/lab/?path=auto_examples/signal_processing/plot_sp_sinusodal_model_analysis_synthesis.ipynb
        :alt: Launch JupyterLite
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sp_sinusodal_model_analysis_synthesis.ipynb <plot_sp_sinusodal_model_analysis_synthesis.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sp_sinusodal_model_analysis_synthesis.py <plot_sp_sinusodal_model_analysis_synthesis.py>`


.. include:: plot_sp_sinusodal_model_analysis_synthesis.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
