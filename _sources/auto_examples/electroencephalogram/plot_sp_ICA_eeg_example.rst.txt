
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/electroencephalogram/plot_sp_ICA_eeg_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_electroencephalogram_plot_sp_ICA_eeg_example.py>`
        to download the full example code or to run this example in your browser via JupyterLite or Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_electroencephalogram_plot_sp_ICA_eeg_example.py:


===============================
Independed Principle Component analysis
===============================

Using *InfoMax, Extended InfoMax, FastICA, & Picard*

.. GENERATED FROM PYTHON SOURCE LINES 8-17

.. code-block:: Python




    import numpy as np
    import matplotlib.pyplot as plt
    #from spkit import ICA
    import spkit as sp
    print('spkit version :', sp.__version__)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    spkit version : 0.0.9.7




.. GENERATED FROM PYTHON SOURCE LINES 18-20

Load and filter EEG Signal
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 20-28

.. code-block:: Python


    # Load sample EEG Data ( 16 sec, 128 smapling rate, 14 channel)
    # Filter signal (with IIR highpass 0.5Hz)

    X, fs, ch_names = sp.data.eeg_sample_14ch()
    Xf = sp.filter_X(X.copy(),fs=128.0, band=[0.5], btype='highpass',ftype='SOS')
    print(Xf.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (2048, 14)




.. GENERATED FROM PYTHON SOURCE LINES 29-31

Applying ICA
--------------

.. GENERATED FROM PYTHON SOURCE LINES 31-54

.. code-block:: Python


    methods = ('fastica', 'infomax', 'extended-infomax', 'picard')
    icap = ['ICA'+str(i) for i in range(1,15)]

    x = Xf[128*10:128*12,:]
    t = np.arange(x.shape[0])/128.0

    myICA = sp.ICA(n_components=14,method='fastica')
    myICA.fit(x.T)
    s1 = myICA.transform(x.T)

    myICA = sp.ICA(n_components=14,method='infomax')
    myICA.fit(x.T)
    s2 = myICA.transform(x.T)

    myICA = sp.ICA(n_components=14,method='picard')
    myICA.fit(x.T)
    s3 = myICA.transform(x.T)

    myICA = sp.ICA(n_components=14,method='extended-infomax')
    myICA.fit(x.T)
    s4 = myICA.transform(x.T)








.. GENERATED FROM PYTHON SOURCE LINES 55-57

Plots
----------

.. GENERATED FROM PYTHON SOURCE LINES 57-100

.. code-block:: Python


    plt.figure(figsize=(15,15))
    plt.subplot(321)
    plt.plot(t,x+np.arange(-7,7)*200)
    plt.xlim([t[0],t[-1]])
    plt.yticks(np.arange(-7,7)*200,ch_names)
    plt.title('X : EEG Data')

    plt.subplot(322)
    plt.plot(t,s1.T+np.arange(-7,7)*700)
    plt.xlim([t[0],t[-1]])
    plt.yticks(np.arange(-7,7)*700,icap)
    plt.title('FastICA')

    plt.subplot(323)
    plt.plot(t,s2.T+np.arange(-7,7)*700)
    plt.xlim([t[0],t[-1]])
    plt.yticks(np.arange(-7,7)*700,icap)
    plt.title('Infomax')

    plt.subplot(324)
    plt.plot(t,s3.T+np.arange(-7,7)*700)
    plt.xlim([t[0],t[-1]])
    plt.yticks(np.arange(-7,7)*700,icap)
    plt.title('Picard')

    plt.subplot(325)
    plt.plot(t,s4.T+np.arange(-7,7)*700)
    plt.xlim([t[0],t[-1]])
    plt.yticks(np.arange(-7,7)*700,icap)
    plt.title('Extended-Infomax')
    plt.tight_layout()
    plt.show()


    t = np.arange(Xf.shape[0])/128.0
    plt.figure(figsize=(12,5))
    plt.plot(t,Xf+np.arange(-7,7)*200)
    plt.xlim([t[0],t[-1]])
    plt.xlabel('time(sec)')
    plt.yticks(np.arange(-7,7)*200,ch_names)
    plt.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/electroencephalogram/images/sphx_glr_plot_sp_ICA_eeg_example_001.png
         :alt: X : EEG Data, FastICA, Infomax, Picard, Extended-Infomax
         :srcset: /auto_examples/electroencephalogram/images/sphx_glr_plot_sp_ICA_eeg_example_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/electroencephalogram/images/sphx_glr_plot_sp_ICA_eeg_example_002.png
         :alt: plot sp ICA eeg example
         :srcset: /auto_examples/electroencephalogram/images/sphx_glr_plot_sp_ICA_eeg_example_002.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 101-103

Decomposition and Construction matrices (Extended InfoMax)
-----------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 103-136

.. code-block:: Python


    r"""
    .. math:: 
    
        S = A\cdot (X-\mu)

        X = W\cdot S + \mu

    where :math:`\mu` is mean, computed before applying PCA
    """

    mu = myICA.pca_mean_[:, None]
    W = myICA.get_sMatrix()
    A = myICA.get_tMatrix()

    s1 = np.dot(A,(x.T-mu))
    x1 = np.dot(W,s4)+mu

    plt.figure(figsize=(15,5))
    plt.subplot(121)
    plt.plot(x1.T+np.arange(-7,7)*400)
    plt.yticks(np.arange(-7,7)*400,ch_names)
    plt.title('Reconstructed X')
    plt.subplot(122)
    plt.plot(s1.T+np.arange(-7,7)*400)
    plt.title('Computed ICA Ex-InfoMax')
    plt.yticks(np.arange(-7,7)*400,icap)
    plt.show()
    print('Error X',np.sum(x1-x.T))
    print('Error S',np.sum(s1-s4))






.. image-sg:: /auto_examples/electroencephalogram/images/sphx_glr_plot_sp_ICA_eeg_example_003.png
   :alt: Reconstructed X, Computed ICA Ex-InfoMax
   :srcset: /auto_examples/electroencephalogram/images/sphx_glr_plot_sp_ICA_eeg_example_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Error X 8.524336791992937e-11
    Error S 1.6511510908534532e-11





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.443 seconds)


.. _sphx_glr_download_auto_examples_electroencephalogram_plot_sp_ICA_eeg_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/spkit/spkit/0.9.X?urlpath=lab/tree/notebooks/auto_examples/electroencephalogram/plot_sp_ICA_eeg_example.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: lite-badge

      .. image:: images/jupyterlite_badge_logo.svg
        :target: ../../lite/lab/?path=auto_examples/electroencephalogram/plot_sp_ICA_eeg_example.ipynb
        :alt: Launch JupyterLite
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sp_ICA_eeg_example.ipynb <plot_sp_ICA_eeg_example.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sp_ICA_eeg_example.py <plot_sp_ICA_eeg_example.py>`


.. include:: plot_sp_ICA_eeg_example.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
